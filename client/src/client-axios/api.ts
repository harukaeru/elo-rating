/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DoubleEmoji
 */
export interface DoubleEmoji {
    /**
     * 
     * @type {DoubleEmojiLeft}
     * @memberof DoubleEmoji
     */
    'left': DoubleEmojiLeft;
    /**
     * 
     * @type {DoubleEmojiLeft}
     * @memberof DoubleEmoji
     */
    'right': DoubleEmojiLeft;
    /**
     * 
     * @type {DoubleEmojiLeft}
     * @memberof DoubleEmoji
     */
    'decided': DoubleEmojiLeft;
}
/**
 * 
 * @export
 * @interface DoubleEmojiLeft
 */
export interface DoubleEmojiLeft {
    /**
     * 
     * @type {number}
     * @memberof DoubleEmojiLeft
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DoubleEmojiLeft
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoubleEmojiLeft
     */
    'score'?: string;
}
/**
 * 
 * @export
 * @interface Emoji
 */
export interface Emoji {
    /**
     * 
     * @type {number}
     * @memberof Emoji
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Emoji
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof Emoji
     */
    'score'?: string;
}

/**
 * EmojisApi - axios parameter creator
 * @export
 */
export const EmojisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DoubleEmoji} [doubleEmoji] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decideOneEmoji: async (doubleEmoji?: DoubleEmoji, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/emojis/decide_one/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(doubleEmoji, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmojis: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/emojis/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmojisApi - functional programming interface
 * @export
 */
export const EmojisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmojisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DoubleEmoji} [doubleEmoji] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decideOneEmoji(doubleEmoji?: DoubleEmoji, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubleEmoji>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.decideOneEmoji(doubleEmoji, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmojis(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Emoji>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmojis(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmojisApi - factory interface
 * @export
 */
export const EmojisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmojisApiFp(configuration)
    return {
        /**
         * 
         * @param {DoubleEmoji} [doubleEmoji] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decideOneEmoji(doubleEmoji?: DoubleEmoji, options?: any): AxiosPromise<DoubleEmoji> {
            return localVarFp.decideOneEmoji(doubleEmoji, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmojis(options?: any): AxiosPromise<Array<Emoji>> {
            return localVarFp.listEmojis(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmojisApi - object-oriented interface
 * @export
 * @class EmojisApi
 * @extends {BaseAPI}
 */
export class EmojisApi extends BaseAPI {
    /**
     * 
     * @param {DoubleEmoji} [doubleEmoji] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmojisApi
     */
    public decideOneEmoji(doubleEmoji?: DoubleEmoji, options?: AxiosRequestConfig) {
        return EmojisApiFp(this.configuration).decideOneEmoji(doubleEmoji, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmojisApi
     */
    public listEmojis(options?: AxiosRequestConfig) {
        return EmojisApiFp(this.configuration).listEmojis(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReadonlyEmojisApi - axios parameter creator
 * @export
 */
export const ReadonlyEmojisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listreadonlyEmojis: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/readonly-emojis/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReadonlyEmojisApi - functional programming interface
 * @export
 */
export const ReadonlyEmojisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReadonlyEmojisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listreadonlyEmojis(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Emoji>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listreadonlyEmojis(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReadonlyEmojisApi - factory interface
 * @export
 */
export const ReadonlyEmojisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReadonlyEmojisApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listreadonlyEmojis(options?: any): AxiosPromise<Array<Emoji>> {
            return localVarFp.listreadonlyEmojis(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReadonlyEmojisApi - object-oriented interface
 * @export
 * @class ReadonlyEmojisApi
 * @extends {BaseAPI}
 */
export class ReadonlyEmojisApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReadonlyEmojisApi
     */
    public listreadonlyEmojis(options?: AxiosRequestConfig) {
        return ReadonlyEmojisApiFp(this.configuration).listreadonlyEmojis(options).then((request) => request(this.axios, this.basePath));
    }
}


